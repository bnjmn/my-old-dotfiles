" VIMRC -- https://github.com/bnjmn/dotfiles
" Copyright (c) 2013 Benjamin Petersen 
" ---------------------------------------------------------------------------
" Vundle.vim, Vim Bundle plugin manager, https://github.com/gmarik/Vundle.vim
" ---------------------------------------------------------------------------

" Required by Vundle
" ---------------------------------------------------------------------------

set nocompatible            " be iMproved, required
filetype off                " required (for vundle)

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" ---------------------------------------------------------------------------
" Plugin Bundles - bnjmn
" ---------------------------------------------------------------------------


Plugin 'ervandew/supertab'


" github bundles: user/repo
"Plugin 'Shougo/neocomplete'         " depends on vim-with-lua
Plugin 'scrooloose/nerdcommenter'
Plugin 'mileszs/ack.vim'            " depends on system ack
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-dispatch'
Plugin 'airblade/vim-gitgutter'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'jmcantrell/vim-virtualenv'

" On trial
Plugin 'Raimondi/delimitMate'
Plugin 'AndrewRadev/linediff.vim'

" See install, requires compiled libs
Plugin 'Valloric/YouCompleteMe'

" Close scratch preview
autocmd CompleteDone * pclose

Plugin 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"



call vundle#end()
filetype plugin indent on   " required

" ---------------------------------------------------------------------------
"
" ---------------------------------------------------------------------------

let mapleader = ","
let maplocalleader = "\\"

colorscheme pablo
set background=dark

" Load Jython (*.jy) as Python filetype
au BufRead,BufNewFile *.jy set filetype=python

" markdown syntax only works on *.markdown by default
au BufRead,BufNewFile *.md set filetype=markdown


" TESTING GROUND ----------------------

" Resize panes more than one line at a time
nnoremap <silent> + :exe "resize " . (winheight(0) * 5/4)<CR>
nnoremap <silent> - :exe "resize " . (winheight(0) * 3/4)<CR>

" Resize window width
nnoremap <C->> <C-w><
nnoremap <C-L> <C-w>>

" ---------------------------------------------------------------------------
" Environment Settings
" ---------------------------------------------------------------------------

"highlight ColorColumn ctermbg=darkgrey guibg=darkgrey

set wildmode=longest,list,full
set wildmenu

syntax on                       " syntax highlighting please
set number                      " show line numbers

set tabstop=4                   " tabs take four spaces
set shiftwidth=4                " width of autoindentation in spaces
set softtabstop=4
set expandtab                   " convert tabs to spaces
set backspace=indent,eol,start  " everybody's doing it

set autoindent                  " copy indent from current line
set smartindent                 " smarter indent, matches brackets and stuff

set listchars=tab:▸\ ,eol:¬     " Make tabstops and EOLs a little less distracting

set hlsearch
set incsearch

" Toggle `set list`
nnoremap <leader>l :set list!<CR> 

" Toggle paste/nopaste
nnoremap <leader>p :set paste!<CR> 

" Toggle number/nonumber
nnoremap <leader>n :set number!<CR> 

" Toggle spell checking
nnoremap <leader>sp :set spell!<CR> 

" Clear search highlight
nnoremap <leader>h :nohlsearch<cr>

" ---------------------------------------------------------------------------
" Mappings 
" ---------------------------------------------------------------------------

" Window Mapping - Make switching windows easier
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l


" open and edit .vimrc  / source .vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr> :echo "vimrc sourced"<cr>

" Omni-complete shortcut
"inoremap <leader>, <C-x><C-o>


" ---------------------------------------------------------------------------
" Abbreviations
" ---------------------------------------------------------------------------
iabbrev respsone response
iabbrev pyta import pytest<cr>@pytest.mark.a 

iabbrev pytdb import ipdb; ipdb.set_trace()


" Copy to buffer (Ctrl-C)
vnoremap <C-c> :w! ~/.vimbuffer<CR>
nnoremap <C-c> :.w! ~/.vimbuffer<CR>
" Paste from buffer
noremap <C-p> :r ~/.vimbuffer<CR>

" Line ending issues, convert to correct
command! FixLineEndings execute "%s///g"


" Convert Markdown links to rst
nnoremap <leader>mtr F[r`f]r f(r<f)r>a`_<esc>

" FormatJSON
command! FormatJSON %!python -m json.tool

" Go, Buffer. Go!
nnoremap gb :ls<CR>:b<Space>

" Fix quick write/quit
command! Wq wq
command! WQ wq
command! W w
command! Q q

" Ack!
nnoremap <leader>a :Ack! 
nnoremap <leader>A :AckFromSearch<CR>

nnoremap <leader>w :wa<CR> :echo "All buffers saved!"<cr>

command! InsertTime :normal a<c-r>=strftime('%F %H:%M:%S.0 %z')<cr>

" Easily edit relative to current path
cabbr <expr> %% expand('%:p:h')

" Write file when leaving insert mode
autocmd InsertLeave * if expand('%') != '' | update | endif

" See `:h Y`
nnoremap Y y$

highlight clear SignColumn


" ---------------------------------------------------------------------------
" Neocomplete suggested settings
" ---------------------------------------------------------------------------

"let g:acp_enableAtStartup = 0                           " Disable AutoComplPop.
"let g:neocomplete#enable_at_startup = 0                 " Use neocomplete.
"let g:neocomplete#enable_smart_case = 1                 " Use smartcase.
"let g:neocomplete#sources#syntax#min_keyword_length = 3 " Set minimum syntax keyword length.
"let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

"" Reading thru manual and making personal settings
"let g:neocomplete#max_list = 8                          " default is 100
"let g:neocomplete#max_keyword_width = 50                " default is 80
"let g:neocomplete#auto_completion_start_length = 2      " default is 2
"let g:neocomplete#min_keyword_length = 1                " default is 1
"let g:neocomplete#enable_ignore_case = 1                " default is 1, (On, ignorecase)
"let g:neocomplete#enable_smart_case = 1                 " default is 1, (On, infercase)
"let g:neocomplete#enable_camel_case = 0                 " default is 0, (Off)
"let g:neocomplete#disable_auto_complete = 0             " default is 0, (Off)
"let g:neocomplete#enable_cursor_hold_i = 0              " default is 0, (Off)
"let g:neocomplete#cursor_hold_i_time = 300              " default is 300
"let g:neocomplete#enable_insert_char_pre = 0            " default is 0



"g:neocomplete#enable_auto_select
		"Default value is 0.

"g:neocomplete#enable_auto_delimiter
		"Default value is 0.

"g:neocomplete#enable_fuzzy_completion
		"Default value is 1.

"g:neocomplete#enable_multibyte_completion
		"Default value is 0.

"g:neocomplete#lock_buffer_name_pattern
		"Default value is ''.

"g:neocomplete#lock_iminsert
		"Default value is 0.

"g:neocomplete#data_directory
		"Default value is "$XDG_CACHE_HOME/neocomplete" or
		"expand("~/.cache/neocomplete"); the absolute path of it.

"g:neocomplete#keyword_patterns

"g:neocomplete#force_omni_input_patterns

"g:neocomplete#same_filetypes

"g:neocomplete#text_mode_filetypes

"g:neocomplete#ctags_command
		"Default value is "ctags".

"g:neocomplete#ctags_arguments

"g:neocomplete#delimiter_patterns

"g:neocomplete#sources

"b:neocomplete_sources

"g:neocomplete#release_cache_time
		"Default value is 900.

"g:neocomplete#tags_filter_patterns

"g:neocomplete#use_vimproc
		"Default value is vimproc auto detection result.

"g:neocomplete#ignore_composite_filetypes
		"Default value is {}.

"g:neocomplete#skip_auto_completion_time
		"Default value is "0.3".

"g:neocomplete#enable_auto_close_preview
		"Default value is 1.

"g:neocomplete#fallback_mappings
		"Default value is [].


"" Define dictionary.
"let g:neocomplete#sources#dictionary#dictionaries = {
    "\ 'default' : '',
    "\ 'vimshell' : $HOME . '/.vimshell_hist',
    "\ 'scheme' : $HOME . '/.gosh_completions'
        "\ }

"" Define keyword.
"if !exists('g:neocomplete#keyword_patterns')
    "let g:neocomplete#keyword_patterns = {}
"endif
"let g:neocomplete#keyword_patterns['default'] = '\h\w*'

"" Plugin key-mappings.
"inoremap <expr><C-g>     neocomplete#undo_completion()
"inoremap <expr><C-l>     neocomplete#complete_common_string()

"" Recommended key-mappings.
"" <CR>: close popup and save indent.
"inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"function! s:my_cr_function()
  "return neocomplete#close_popup() . "\<CR>"
  "" For no inserting <CR> key.
  ""return pumvisible() ? neocomplete#close_popup() : "\<CR>"
"endfunction
"" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"" <C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><C-y>  neocomplete#close_popup()
"inoremap <expr><C-e>  neocomplete#cancel_popup()

"" Enable omni completion.
"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"" Enable heavy omni completion.
"if !exists('g:neocomplete#sources#omni#input_patterns')
  "let g:neocomplete#sources#omni#input_patterns = {}
"endif

" }}}1
if filereadable(expand($HOME . "/.vimrc.local"))
  source ~/.vimrc.local
endif



" Allow more tabs to be opened with `vim -p *.xyz`
set tabpagemax=100

autocmd Filetype gitcommit setlocal spell textwidth=72
