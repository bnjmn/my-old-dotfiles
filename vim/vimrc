" VIMRC -- https://github.com/bnjmn/dotfiles
" Copyright (c) 2013 Benjamin Petersen

" ---------------------------------------------------------------------------
" Vundle.vim, Vim Bundle plugin manager, https://github.com/gmarik/Vundle.vim
" ---------------------------------------------------------------------------

" Required by Vundle
" ---------------------------------------------------------------------------

set nocompatible            " be iMproved, required
filetype off                " required (for vundle)

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" ---------------------------------------------------------------------------
" Plugin Bundles - bnjmn
" ---------------------------------------------------------------------------

" github bundles: user/repo
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'jmcantrell/vim-virtualenv'
Plugin 'mileszs/ack.vim'            " depends on system ack

" On trial
Plugin 'Raimondi/delimitMate'
Plugin 'AndrewRadev/linediff.vim'

Plugin 'Shougo/neocomplete'         " depends on vim-with-lua
Plugin 'airblade/vim-gitgutter'

call vundle#end()
filetype plugin indent on   " required; doubled in .vimrc

" ---------------------------------------------------------------------------
"
" ---------------------------------------------------------------------------


let mapleader = ","
let maplocalleader = "\\"

" Load Jython (*.jy) as Python filetype
au BufRead,BufNewFile *.jy set filetype=python

" markdown syntax only works on *.markdown by default
au BufRead,BufNewFile *.md set filetype=markdown


" TESTING GROUND ----------------------

" Folding
set foldmethod=indent
set foldlevelstart=99
set foldnestmax=2

" Resize panes more than one line at a time
"set winheight=30
"set winminheight=5
nnoremap <silent> + :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> - :exe "resize " . (winheight(0) * 2/3)<CR>

" ---------------------------------------------------------------------------
" Environment Settings
" ---------------------------------------------------------------------------

colorscheme  elflord
set background=dark
"highlight ColorColumn ctermbg=darkgrey guibg=darkgrey

set wildmode=longest,list,full
set wildmenu

syntax on                       " syntax highlighting please
set number                      " show line numbers

set tabstop=4                   " tabs take four spaces
set shiftwidth=4                " width of autoindentation in spaces
set softtabstop=4
set expandtab                   " convert tabs to spaces
set backspace=indent,eol,start  " everybody's doing it

set autoindent                  " copy indent from current line
set smartindent                 " smarter indent, matches brackets and stuff

" Make tabstops and EOLs a little less distracting
set listchars=tab:▸\ ,eol:¬
" Shortcut to rapidly toggle `set list`
nnoremap <leader>l :set list!<CR>

" ---------------------------------------------------------------------------
" Mappings 
" ---------------------------------------------------------------------------

" Window Mapping - Make switching windows easier
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" open and edit .vimrc  / source .vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr> :echo "vimrc sourced"<cr>

" Omni-complete shortcut
"inoremap <leader>, <C-x><C-o>

nnoremap <leader>h :nohlsearch<cr>


" ---------------------------------------------------------------------------
" Abbreviations
" ---------------------------------------------------------------------------
iabbrev respsone response
iabbrev pyta import pytest<cr>@pytest.mark.a 

iabbrev pytdb import ipdb; ipdb.set_trace()

" Copy to buffer (Ctrl-C)
vnoremap <C-c> :w! ~/.vimbuffer<CR>
nnoremap <C-c> :.w! ~/.vimbuffer<CR>
" Paste from buffer
noremap <C-p> :r ~/.vimbuffer<CR>

" Line ending issues, convert to correct
command! FixLineEndings execute "%s///g"

" Toggle paste/nopaste
nnoremap <leader>p :set paste!<CR> 

" Toggle number/nonumber
nnoremap <leader>n :set number!<CR> 

" Toggle spell checking
nnoremap <leader>sp :set spell!<CR> 

" Convert Markdown links to rst
nnoremap <leader>mtr F[r`f]r f(r<f)r>a`_<esc>

" FormatJSON
com! FormatJSON %!python -m json.tool


" ---------------------------------------------------------------------------
" Neocomplete suggested settings
" ---------------------------------------------------------------------------

let g:acp_enableAtStartup = 0                           " Disable AutoComplPop.
let g:neocomplete#enable_at_startup = 1                 " Use neocomplete.
let g:neocomplete#enable_smart_case = 1                 " Use smartcase.
let g:neocomplete#sources#syntax#min_keyword_length = 3 " Set minimum syntax keyword length.
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

highlight clear SignColumn

" Fix quick write/quit
command! Wq wq
command! WQ wq
command! W w
command! Q q

" Ack!
nnoremap <leader>a :Ack! 
nnoremap <leader>A :AckFromSearch<CR>

set hlsearch
set incsearch

command! InsertTime :normal a<c-r>=strftime('%F %H:%M:%S.0 %z')<cr>
